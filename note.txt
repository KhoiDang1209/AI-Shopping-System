pages:
    navigation bar (always display):
        home page
        search bar
        user profile
        cart
        check out page

    login page:
        require user to enter email and password to login
        if user dont have account user can change to register page

    register page:
        require user to enter user name, email, phone number, password
        if user already have account (check duplicate email), user can change to login page
  
    user profile:
        show user name, email, phone number
        if user address is empty, require user to enter address
        user address contain, address line, city, region

    home page:
        show recommend product, show different product categories

    products page:
        products being shown after searched
        select an product to view detail

        product detail page:
            show detail information of selected product
            user can choose to add selected product to cart
    
    cart page:
        show products user added to their cart
        user can choose to checkout
    
        order page:
            after checkout, user can provide payment detail and pick shipping method

ai model:
    user rating
    user info
    search recommendation

use case:
    user register
    user login
    user search item
    select searched item
    add selected item to cart
    select item in cart to purchase

Đức Độ
CREATE TABLE "country" (
  "country_id" INT,
  "country_name" VARCHAR(100),
  PRIMARY KEY ("country_id")
);

CREATE TABLE "address      " (
  "address_id" INT,
  "unit_number" VARCHAR(100),
  "street_number" VARCHAR(10),
  "address_line1" VARCHAR(255),
  "address_line2" VARCHAR(255),
  "city" VARCHAR(100),
  "region" VARCHAR(100),
  "postal_code" VARCHAR(20),
  "country_id" INT,
  PRIMARY KEY ("address_id"),
  CONSTRAINT "FK_address      .country_id"
    FOREIGN KEY ("country_id")
      REFERENCES "country"("country_id")
);

CREATE TABLE "site_user" (
  "user_id" INT,
  "email_address" VARCHAR(100),
  "phone_number" VARCHAR(20),
  "password" VARCHAR(255),
  "user_name" VARCHAR(50),
  PRIMARY KEY ("user_id")
);

CREATE TABLE "user_address" (
  "user_id" INT,
  "address_id" INT,
  "is_default" BOOLEAN,
  CONSTRAINT "FK_user_address.address_id"
    FOREIGN KEY ("address_id")
      REFERENCES "address      "("address_id"),
  CONSTRAINT "FK_user_address.user_id"
    FOREIGN KEY ("user_id")
      REFERENCES "site_user"("user_id")
);

CREATE INDEX "" ON  "user_address" ("is_default");

CREATE TABLE "product_category" (
  "category_id" INT,
  "parent_category_id" INT,
  "category_name" VARCHAR(100),
  PRIMARY KEY ("category_id"),
  CONSTRAINT "FK_product_category.parent_category_id"
    FOREIGN KEY ("parent_category_id")
      REFERENCES "product_category"("category_id")
);

CREATE TABLE "interesting_category" (
  "interesting_category_id" INT,
  "category_id" INT,
  "user_id" INT,
  PRIMARY KEY ("interesting_category_id"),
  CONSTRAINT "FK_interesting_category.user_id"
    FOREIGN KEY ("user_id")
      REFERENCES "user_address"("user_id"),
  CONSTRAINT "FK_interesting_category.category_id"
    FOREIGN KEY ("category_id")
      REFERENCES "product_category"("category_id")
);

CREATE TABLE "shipping_method" (
  "shipping_method_id" Type,
  "name" Type,
  "price" Type,
  PRIMARY KEY ("shipping_method_id")
);

CREATE TABLE "variation" (
  "variation_id" INT,
  "category_id" INT,
  "name" VARCHAR(100),
  "size" VARCHAR(50),
  "color" VARCHAR(50),
  PRIMARY KEY ("variation_id"),
  CONSTRAINT "FK_variation.category_id"
    FOREIGN KEY ("category_id")
      REFERENCES "product_category"("category_id")
);

CREATE TABLE "variation_option" (
  "variation_option_id" Type,
  "variation_id" Type,
  "value" Type,
  PRIMARY KEY ("variation_option_id"),
  CONSTRAINT "FK_variation_option.variation_id"
    FOREIGN KEY ("variation_id")
      REFERENCES "variation"("variation_id")
);

CREATE TABLE "product" (
  "product_id" INT,
  "category_id" INT,
  "name" VARCHAR(255),
  "description" TEXT,
  "product_image" VARCHAR(255),
  PRIMARY KEY ("product_id"),
  CONSTRAINT "FK_product.category_id"
    FOREIGN KEY ("category_id")
      REFERENCES "product_category"("category_id")
);

CREATE TABLE "product_item" (
  "product_item_id" INT,
  "product_id" INT,
  "SKU" VARCHAR(50),
  "qty_in_stock" INT,
  "product_image" VARCHAR(255),
  "price" DECIMAL(10, 2),
  PRIMARY KEY ("product_item_id"),
  CONSTRAINT "FK_product_item.product_id"
    FOREIGN KEY ("product_id")
      REFERENCES "product"("product_id")
);

CREATE TABLE "product_configuration" (
  "product_item_id" Type,
  "variation_option_id" Type,
  CONSTRAINT "FK_product_configuration.variation_option_id"
    FOREIGN KEY ("variation_option_id")
      REFERENCES "variation_option"("variation_option_id"),
  CONSTRAINT "FK_product_configuration.product_item_id"
    FOREIGN KEY ("product_item_id")
      REFERENCES "product_item"("product_item_id")
);

CREATE TABLE "payment_type" (
  "payment_type_id" INT,
  "country_name" VARCHAR(100),
  PRIMARY KEY ("payment_type_id")
);

CREATE TABLE "promotion" (
  "promotion_id" INT,
  "name" VARCHAR(100),
  "description" TEXT,
  "discount_rate" DECIMAL(5, 2),
  "start_date" DATE,
  "end_date" DATE     ,
  PRIMARY KEY ("promotion_id")
);

CREATE TABLE "shopping_cart" (
  "shopping_cart_id" INT,
  "user_id" INT,
  PRIMARY KEY ("shopping_cart_id"),
  CONSTRAINT "FK_shopping_cart.user_id"
    FOREIGN KEY ("user_id")
      REFERENCES "site_user"("user_id")
);

CREATE TABLE "shopping_cart_item" (
  "shopping_cart_item_id" INT,
  "shopping_cart_id" INT,
  "product_item_id" INT,
  "qty" INT,
  PRIMARY KEY ("shopping_cart_item_id"),
  CONSTRAINT "FK_shopping_cart_item.shopping_cart_id"
    FOREIGN KEY ("shopping_cart_id")
      REFERENCES "shopping_cart"("shopping_cart_id"),
  CONSTRAINT "FK_shopping_cart_item.product_item_id"
    FOREIGN KEY ("product_item_id")
      REFERENCES "product_item"("product_item_id")
);

CREATE TABLE "promotion_category" (
  "category_id" INT,
  "promotion_id" INT,
  CONSTRAINT "FK_promotion_category.category_id"
    FOREIGN KEY ("category_id")
      REFERENCES "product_category"("category_id"),
  CONSTRAINT "FK_promotion_category.promotion_id"
    FOREIGN KEY ("promotion_id")
      REFERENCES "promotion"("promotion_id")
);

CREATE TABLE "order_status" (
  "order_status_id" INT,
  "status" VARCHAR(50),
  PRIMARY KEY ("order_status_id")
);

CREATE TABLE "shop_order" (
  "order_id" INT,
  "user_id" INT,
  "order_date" DATE,
  "payment_method_id" INT,
  "address_id" INT,
  "shipping_method_id" INT,
  "order_total" DECIMAL(10, 2),
  "order_status_id" INT,
  PRIMARY KEY ("order_id"),
  CONSTRAINT "FK_shop_order.address_id"
    FOREIGN KEY ("address_id")
      REFERENCES "address      "("address_id"),
  CONSTRAINT "FK_shop_order.order_status_id"
    FOREIGN KEY ("order_status_id")
      REFERENCES "order_status"("order_status_id"),
  CONSTRAINT "FK_shop_order.shipping_method_id"
    FOREIGN KEY ("shipping_method_id")
      REFERENCES "shipping_method"("shipping_method_id")
);

CREATE TABLE "user_payment_method" (
  "payment_method_id" INT,
  "user_id" INT,
  "payment_type_id" INT,
  "provider" VARCHAR(100),
  "account_number" VARCHAR(50),
  "expiry_date" DATE,
  "is_default" BOOLEAN,
  PRIMARY KEY ("payment_method_id"),
  CONSTRAINT "FK_user_payment_method.payment_type_id"
    FOREIGN KEY ("payment_type_id")
      REFERENCES "payment_type"("payment_type_id"),
  CONSTRAINT "FK_user_payment_method.user_id"
    FOREIGN KEY ("user_id")
      REFERENCES "site_user"("user_id"),
  CONSTRAINT "FK_user_payment_method.payment_method_id"
    FOREIGN KEY ("payment_method_id")
      REFERENCES "shop_order"("payment_method_id")
);

CREATE TABLE "order_line" (
  "ordered_product_id" INT,
  "product_item_id" INT,
  "order_id" INT,
  "qty" INT,
  "price" DECIMAL(10,2),
  PRIMARY KEY ("ordered_product_id"),
  CONSTRAINT "FK_order_line.order_id"
    FOREIGN KEY ("order_id")
      REFERENCES "shop_order"("order_id"),
  CONSTRAINT "FK_order_line.product_item_id"
    FOREIGN KEY ("product_item_id")
      REFERENCES "product_item"("product_item_id")
);

CREATE TABLE "user_review" (
  "user_review_id" INT,
  "user_id" INT,
  "ordered_product_id" INT,
  "rating_value" DECIMAL(2,1),
  "comment" TEXT,
  PRIMARY KEY ("user_review_id"),
  CONSTRAINT "FK_user_review.ordered_product_id"
    FOREIGN KEY ("ordered_product_id")
      REFERENCES "order_line"("ordered_product_id"),
  CONSTRAINT "FK_user_review.user_id"
    FOREIGN KEY ("user_id")
      REFERENCES "site_user"("user_id")
);